---
apiVersion: batch/v1
kind: Job
metadata:
  # namespace: poc-minio
  name: poc-minio-job-seed-images
spec:
  backoffLimit: 4
  template:
    spec:
      containers:
      - name: add-images-to-bucket
        image: image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/s2i-generic-data-science-notebook:1.2
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash"]
        args:
        - -ec
        - |-
          git clone https://github.com/BramTerlouw/Beroepsproduct.git

          cat << 'EOF' | python3
          import boto3, os, botocore

          s3 = boto3.client("s3",
                            endpoint_url="http://poc-minio-service:9000",
                            aws_access_key_id=os.getenv("minio_root_user"),
                            aws_secret_access_key=os.getenv("minio_root_password"))
          
          # Upload incident images to minio
          for filename in os.listdir("Beroepsproduct/Data/Incidents_images"):
              with open(f"Beroepsproduct/Data/Incidents_images/{filename}", "rb") as f:
                  s3.upload_fileobj(f, "images", f"incidents/{filename}")

          # Upload training images to minio
          local_base_dir_training = "Beroepsproduct/Data/Training_images"
          bucket_name = "images"

          # Walk through all directories and files within 'Training_images'
          for root, dirs, files in os.walk(local_base_dir_training):
              for filename in files:
                  # Construct the full local path to the file
                  local_file_path = os.path.join(root, filename)
                  
                  # Construct the S3 key by maintaining the directory structure
                  # Remove the base directory part from the local path to get the relative path
                  relative_path = os.path.relpath(local_file_path, local_base_dir_training)
                  s3_key = f"train/{relative_path}"
                  
                  # Open the file and upload it to S3
                  with open(local_file_path, "rb") as f:
                      s3.upload_fileobj(f, bucket_name, s3_key)
            
          # Upload validation images to minio
          local_base_dir_validation = "Beroepsproduct/Data/Validation_images"
          bucket_name = "images"

          # Walk through all directories and files within 'Validation_images'
          for root, dirs, files in os.walk(local_base_dir_validation):
              for filename in files:
                  # Construct the full local path to the file
                  local_file_path = os.path.join(root, filename)
                  
                  # Construct the S3 key by maintaining the directory structure
                  # Remove the base directory part from the local path to get the relative path
                  relative_path = os.path.relpath(local_file_path, local_base_dir_validation)
                  s3_key = f"validate/{relative_path}"
                  
                  # Open the file and upload it to S3
                  with open(local_file_path, "rb") as f:
                      s3.upload_fileobj(f, bucket_name, s3_key)

          EOF
        envFrom:
        - secretRef:
            name: poc-minio-credentials
      restartPolicy: Never